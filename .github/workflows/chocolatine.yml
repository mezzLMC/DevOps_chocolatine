name: chocolatine

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-STG-2-1-chocolatine-mohamed.mazouz.git"
  EXECUTABLES: "push_swap"

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

jobs:
    check_coding_style:
      name: check coding style
      runs-on: ubuntu-latest
      container:
          image: ghcr.io/epitech/coding-style-checker:latest
      steps:
          - name: Checkout
            uses: actions/checkout@v3

          - name: get coding-style errors
            id: check_coding_style
            run: |
              check.sh $(pwd) $(pwd)
              while read ERROR; do
                filename=$(echo $ERROR | cut -d ':' -f 1 | cut -d '/' -f 2)
                line=$(echo $ERROR | cut -d ':' -f 2)
                gravity=$(echo $ERROR | awk -F ':' '{print $3}')
                error=$(echo $ERROR | awk -F ':' '{print $4}')
                echo "::error file=$filename,line=$line,title=$gravity coding style error::$error"
              done < coding-style-reports.log
              if [ -s coding-style-reports.log ]
              then
                exit 1
              fi

    check_program_compilation:
      name: check program compilation
      runs-on: ubuntu-latest
      needs: check_coding_style
      container:
          image: epitechcontent/epitest-docker:latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: build project
          id: make_project
          timeout-minutes: 2
          run: |
            make

        - name: clean project
          id: clean_project
          run: |
            make clean

        - name: check executables
          id: check_executables
          run: |
            for executable in $EXECUTABLES; do
              if [ ! -f $executable ]; then
                echo "::error file=Makefile,line=1,title=Compilation error::$executable not found"
                exit 1
              fi
            done
      
    run_tests:
      name: run tests
      runs-on: ubuntu-latest
      needs: check_program_compilation
      container:
          image: epitechcontent/epitest-docker:latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: run tests
          id: run_tests
          timeout-minutes: 2
          run: |
            make tests_run
  
    push_to_mirror:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Mirror repository
          uses: pixta-dev/repository-mirroring-action@v1
          with:
            target_repo_url: ${{ env.MIRROR_URL }}
            ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      
